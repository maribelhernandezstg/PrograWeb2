//schemas prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  username  String      @unique
  password  String
  name      String
  lastName  String
  email     String      @unique
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  savedPosts savedPosts[]
  tableros  Tableros[]
}

model Post {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  titulo      String
  descripcion String
  img         String
  active      Boolean     @default(true)
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
  comments    Comment[]
  likes       Like[]
  savedPosts  savedPosts[]
  postSearches PostSearch[]
}

model Tableros {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  titulo      String
  descripcion String
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int
}

model savedPosts {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  link      String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

model PostSearch {
  id        Int      @id @default(autoincrement())
  postId    Int
  terms     String
  post      Post     @relation(fields: [postId], references: [id])
}


model tableros1{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  titulo    String
  descripcion String
  publicacion publicaciones[]
}

model publicaciones{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  titulo    String
  descripcion String
  img       String
  favoritos Favoritos[]
   tablero tableros1[]
  Busqueda busqueda[]
}

model comentarios{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  contenido String
}

model Favoritos {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  publicacion  publicaciones[]   // Relaci√≥n con las publicaciones favoritas
}

model busqueda{
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
   publicacion  publicaciones[]  
}
